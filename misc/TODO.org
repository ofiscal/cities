* TODO fix broken OneDrive archive
maybe add a key, so that OneDrive can't extract and re-archive it
* TODO explore the data
** TODO enumerate the many-to-one mappings where isomorphisms are expected
see TODO in test_bijectivity.py
*** the columns
Código FUT, Nombre Entidad
  isomorphic
Cód. DANE Departamento, Nombre DANE Departamento
  isomorphic
Cód. DANE Municipio, Nombre DANE Municipio
  some "Nombre DANE Municipio" values map to multiple codigos
  but no codigos maps to multiple nombres
Código Concepto, Concepto
  neither direction is bijective
Código Fuente Financiación, Fuente Financiación
  isomorphic
Código Fuentes De Financiación, Fuentes de Financiación
  isomorphic
*** TODO check that department disambiguates the muliply-mapped municipalities
Make something like "Nombre DANE Municipio.csv",
but including department and count (as opposed to multiplicity).
Cód. DANE Municipio	Nombre DANE Municipio	count
5055.0	                ARGELIA                 3
** regions
*** are almost uniquely identified by 8|9 digit codes
Some valid 8-digit codes are subsets of valid 9-digit ones.
Will therefore need to find the best regex match to the name.
*** a nearly-comprehensive list of them
comes from Directorio_CHIP_Mesa_de_Ayuda_Contraloria_2009.xls
  (which Juan found)
A subset of it became data/regions/*.csv
Municipalities are those in which the first column is 21.
  That rule collects 9 false positives,
  all of which match one of these two regular expressions:
    ^DEFENSA CIVIL COLOMBIANA$
    ^CORPORACION.*
  They have been deleted.
Departments are those in which the first column is 11.
* TODO build data
** aggregate by concepto
 Use codigo concepto, not (verbal) concepto.

 If the "subcategory summation" check works,
 then ignore these, because they are redundant.
 VAL	INGRESOS TOTALES

 Ignore these because they are checks:
 VAL	CIFRA CONTROL
 VAL	CIFRAS DE CONTROL PARA LOS GASTOS DE FUNCIONAMIENTO
* TODO test
** unit tests
*** "subcategory summation"
Check that, e.g., T1 = T1.A.1 + T1.A.2 + T1.B
** integration tests
Can check results at
https://terridata.dnp.gov.co/
(enter a municipality (department also possible))
and then choose "finanzas publicas".
* PITFALLS interpreting the data
Some series might not be uniformly sampled across time.
* drawing
** TODO get drawStacks() to respect outer subplots
 rework this line:
   fig, (ax) = plt.subplots()
** Emulate the graph on p.2 of the mockup pdf.
*** *???* If boxes are too small to fit a number, aggregate somehow.
*** DONE Stack the boxes, with a line and no space between.
*** legend : draw to the side, not on top of graph
*** Write the total above each stack.
*** Color the boxes per Manuela's specs.
*** DONE Put text indicating the amount on each box.
 "By default, [the x and y arguments to matplotlib.axes.Axes.text() are] in data coordinates."
 https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.axes.Axes.text.html
*** DONE No y-axis. Years on the x-axis.
*** DONE Big space between each column.
*** Change fonts
 refer to fonts/custom-font.py for
**** color: white
**** style: Montserrat black & Montserrat light
 source code: https://github.com/JulietaUla/Montserrat
 main page: https://fonts.google.com/specimen/Montserrat
*** Include text from an accompanying .txt file.
** TODO build a pdf
*** TODO use matplotlib
*** DONE reportlab is too complex and unfree
 pip3 install reportlab
**** DONE ReportLab
 https://www.reportlab.com/documentation/
**** custom fonts in reportlab
 https://www.reportlab.com/documentation/faq/#2.6.2
*** DONE pyfpdf appears to badly support Python 3
 pip install --upgrade pip # afte running this, did not have pip3
 seems to be working: "python3 -m pip install fpdf"
 recommended was      "python  -m pip install fpdf"
** wish: that I could set font only once, affecting all types of text
* gotchas
** underscores in filenames seem to confuse Matplotlib's font_manager
https://github.com/matplotlib/matplotlib/issues/14536
** local modules must begin with a capital letter to be imported in Jupyter
Keeping all code in a top-level folder that starts with a capital letter solves this problem. Subfolders and files suffer no naming restriction.
** every code folder needs a __init__.py file
as of some recent version of Python
** change every background color: methods that didn't work
*** plt.rcParams['axes.facecolor] = 'b'
Changes the legend background, nothing else
*** ax.set_facecolor('b')
no discernible effect
*** ax.patch.set_facecolor('b')
no discernible effect
*** fig.add_subplot(2, 1, 1, facecolor = "red")
causes the second figure not to be drawn,
no other discernible effect
**** code example
   fig = Figure()

   ax = fig.add_subplot(2, 1, 1, facecolor = "red")
   drawText( ax, lines )
*** pdf.savefig() overrides background color in figures
https://stackoverflow.com/questions/56606122/matplotlib-use-the-same-custom-font-in-every-kind-of-text-axes-title-text
