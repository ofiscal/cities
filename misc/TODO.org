* notes from seminar, 2019 08 16
** draw a benchmark similarly to the city's report
** corrupt governors will suppress the mediax
** can measure complaints of [vote buying] after election
** candidates might use our reports
** control for|stratify by reporters' sense of security
* notes from meeting, 2019 08 14
** regalias
*** oil price fell a lot from 2014 to 2015
But fortunately the regalias data lumps 2013 with 2014,
and 2015 with 2016.
*** the country's revenue split
Is 80% to non-producer munis, and 20% to the few that do produce.
Among those producers it is divided by some complex formula,
taking into account poverty, other things.
** what to use
Obligaciones = money that will be spent. Pagos = money already spent. Obligaciones seems more natural; it includes money that was budgeted this year even if it actually gets spent next year.
** what things are
*** TI.A.1, TI.A.2, TI.B
asignaciones = transferencias
  not including regalias

("Presupuesto Inicial"    , "item init")
  # expectation, proposed by secretary of finance of muni or dept
("Presupuesto Definitivo" , "item def")
  # expectation, approved by city council or state assembly
("Recaudo"                , "item recaudo")
  # what they took in
("Total Ingresos"         , "item total")]
  # ? sould be equal to recaudo
*** spending
These are ordered by time.

("Presupuesto Inicial"    , "item init")
  # proposed by secretary of finance of muni or dept

("Presupuesto Definitivo" , "item def")
  # approved by city council or state assembly

("Compromisos"            , "item comp")
  # the maximum they could use in obligaciones; at end of year, should be equal to obligaciones. this is more disaggregated than the presupuesto.

("Obligaciones"           , "item oblig")
  # both parties promise, neither has delivered yet

("Pagos"                  , "item pagos")
  # what they've actually spent

* notes from meeting, 2019 10 01
** TODO pdf without page break
** muni-specific pdf has a link to guide, and to all munis
* TODO first
** TODO generate radio scripts
*** TODO generate additional, totally-disaggregated spending-pct charts
that don't lump anything into Otros
** DONE change charts, data
Averages are only 2016-2018.
Line should read "el 1 de enero de 2016 hubo cambio"
** TODO ? urls in pdfs
Including a URL in the text itself makes it clickable.

plt.subplot, and plt.text, both have "url" arguments. neither is working.
file:///home/jeff/cities/output/pivots/recip-100/CAUCA/MORALES/report.pdf
** TODO serve the data
** TODO generate pictures for Facebook ads
** draw charts
*** shrink numbers
**** smaller font
**** write functions to abbreviate numbers
Find the max number in the table.
Find how many commas would be in it
  Code.draw.shrink_numbers.commas
Determine the units for the chart
  Code.draw.shrink_numbers.units
Print each number to 3 significant digits, like this:
  Code.draw.shrink_numbers.show_brief
**** show numbers with abbreviation functions main.py
**** add units to the charts
e.g. "millones de pesos" if that's appropriate
**** shift the image of the sum in screen coordinates
ax.transAxes(_, transform=ax.transData)
https://matplotlib.org/3.1.1/tutorials/advanced/transforms_tutorial.html
**** draw only when space permits
*** compare muni to dept average muni
**** spec
summing years 2016-2018
**** PITFALL: In subsamples, average muni looks wrong
That's because the total number of munis in a department
is calculated from reality, not the subsample.
Hence the divisor is too big, and the resulting percentages too small.
**** build tables
For all real and promedio munis:
  From time-series %-valued pivot tables, make averages over [2016,2018].
  For gastos, keep the top gastos, lump the rest into "other".
    Since there is no year axis to worry about, this should be easier
    than it was for the pivots.
**** draw paired bar charts
 Muni on left, average on right, paired by spending item.
 Legend above.
 Labels centered between each pair of bars.
 Percentage axis.
*** compute (muni,series)-specific titles, text, axis names
**** "(upside down ?)Cuanto dinero recibe mi municipio?"
**** "(upside down ?)En que se gasta el dinero mi municipio?"
**** store series-specific titles, text, axis boilerplate
*** experiment with dimension changes (of whole page)
*** TODO get drawStacks() to respect outer subplots
 rework this line:
    fig, (ax) = plt.subplots()
*** *BIG* Emulate the graph on p.2 of the mockup pdf.
**** *???* If boxes are too small to fit a number, aggregate somehow.
**** DONE Stack the boxes, with a line and no space between.
**** legend : draw to the side, not on top of graph
**** Write the total above each stack.
**** Color the boxes per Manuela's specs.
**** DONE Put text indicating the amount on each box.
  "By default, [the x and y arguments to matplotlib.axes.Axes.text() are] in data coordinates."
  https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.axes.Axes.text.html
**** DONE No y-axis. Years on the x-axis.
**** DONE Big space between each column.
**** Change fonts
  refer to fonts/custom-font.py for
***** color: white
***** style: Montserrat black & Montserrat light
  source code: https://github.com/JulietaUla/Montserrat
  main page: https://fonts.google.com/specimen/Montserrat
*** build a pdf
**** use matplotlib
**** DON'T: reportlab is too complex and unfree
  pip3 install reportlab
***** DONE ReportLab
  https://www.reportlab.com/documentation/
***** custom fonts in reportlab
  https://www.reportlab.com/documentation/faq/#2.6.2
**** DON'T: pyfpdf appears to badly support Python 3
  pip install --upgrade pip # afte running this, did not have pip3
  seems to be working: "python3 -m pip install fpdf"
  recommended was      "python  -m pip install fpdf"
** DONE match latest spec
https://mail.google.com/mail/u/0/#search/from%3Amanuela/FMfcgxwDrbzNHKThbjHjzZrPlVNmDXGc
*** was: add text to pdfs
**** Observatorio logo
**** Title: ¿En qué se gastan la plata los gobernantes de <muni name>?
**** pictures
***** Gastos vs. average (%)
  ¿Cómo se gasta la plata <muni name>,
  y cómo se compara con el promedio de <dept name>?
***** Ingresos vs. average (%)
  ¿De dónde viene la plata de <muni name>,
  y cómo se compara con el promedio de <dept name>?
***** Gastos over time (pesos)
  ¿En qué se han gastado la plata la alcaldía y el concejo de <muni name>? ¿En qué se gastaron la plata la alcaldía y el concejo anteriores? (En el 2015, hubo cambio de gobierno municipal.)
***** Ingresos over time (pesos)
  ¿De dónde se obtuvo la plata de <muni name>, en esta administración y la anterior? (En el 2015, hubo cambio de gobierno municipal.)
**** zen questions
  Como ciudadano de <muni name>, usted puede observar el desempeño del gobierno municipal mejor que nadie.

  ¿Se están gastando adecuadamente los recursos del municipio?
  ¿Qué promesas están haciendo los candidatos? Sí alcanza la plata para lo que estan prometiendo?
  ¿Qué gastos habría que recortar?
  ¿Qué ingresos tendrían que subir?

  Su voto determina en manos de quien van a quedar los recursos del municipio. ¡Vote!
**** link to guide
  Si quiere saber más sobre como se maneja la plata de un municipio,
  haga clic aquí.
**** link to all munis
  Para ver información de otros municipios,
  haga clic aquí.
*** shorten names
Rename San Andrés to that.
Bring capital letters to lowercase.
Test with the longest muni and dept names.
  Norte de Santander          : longest dept name
  Villa de San Diego de Ubate : longest muni name
*** icon
*** use a class to describe chart pages
for looping over in main.py
*** at sides put percentages, not absolute values
*** write percentages above paired bars
*** totals above each bar
*** colors
*** page dimensions, border
512 to 1024 before margin
margin is 85 more in each dimension
** (abandoned) new data
*** DONE find which money-value column to use from Juan
 "Valor Total Pagado Vigencia Con Regalías" : "item oblig"
*** TODO compare means for that money-valued column by year
Ask Juan if he gets the same; if so, it's being read correctly.
*** TODO determine whether to deflate, and whether to scale pre-2017 years
Definitely deflate.
1000x adjustment not clear.
*** TODO process through budget_1p5
Thereafter there are only two series, ingresos and gastos.
*** stale
**** some rows are dept-level, includes missing value for muni
**** TODO compare wc on laptop to wc on desktop
**** TODO compare xlsx lengths in OpenOffice to wc results on csv
**** TODO update team about new data differences, if extant.
  It might bear on what we've published.
* TODO scripts to read aloud
** per muni, % of income from each source
* DONE ? determine the range of legend lengths
** why and how
as a function of the n in
"keep the biggest n expenditures per year, group the rest".

The 20 smallest and biggest can be found at the command line:
wc */*/gastos* | sort -n -r | head -n 2
wc */*/gastos* | sort -n -r | tail -n 2
** results
top 1 from each year => min 2 rows, max 6
top 2 from each year => min 3 rows, max 9
top 3 from each year => min 4 rows, max 10
top 4 from each year => min 5 rows, max 11
top 5 from each year => min 6 rows, max 12
* DONE ? are non-regalias ingresos disappearing for munis? (not depts)
** For the full sample they're not gone.
** For small samples,
they're gone after budget_5 and thereafter,
but present after budget_4.
** some code to see the problem

if True:
  import os
  import numpy as np
  import pandas as pd
  #
  import Code.common as c
  import Code.util.aggregate_all_but_biggest as defs
  import Code.metadata.two_series as ser

if True:
  spacetime = ["dept code", "muni code", "year"]
  space     = ["dept code", "muni code"]

if True: # read data
  raw = {}
  for s in ser.series:
    raw[s.name] = (
      pd.read_csv(
        ( "output/budget_5_add_regalias/recip-" + str(c.subsample)
          + "/" + s.name + ".csv") ) .
      sort_values( spacetime ) )

for s in ser.series:
  for dfs in [raw]:
    dfs[s.name]["item categ"] = (
      dfs[s.name]["item categ"] .
      apply( lambda s: s[:10] ) )

pd.set_option('display.min_rows', 500)
pd.set_option('display.max_rows', 500)

( raw["ingresos"] .
  describe( include="all" )
  [              spacetime + ["item categ","item total"]] )

( raw["ingresos"]
  [              spacetime + ["item categ","item total"]] .
  sort_values(   spacetime + ["item categ","item total"] ) )
* TODO ? investigate
** TODO : verify muni-year count for a department that was missing a year
missing 2018 for some data set:
CHOCÓ 27 ALTO BAUDÓ 27025.0
** TODO ? integ tests
*** for stages
Have tested through 6p7, and they're good.
Previously (before inserting 6p5, 6p7) had tested all 8,
and they were good.
*** for subsamples
Verify each is a proper subspace of the full data set.
** verify desktop-laptop equivalence
*** TODO the data is different but, I think, isomorphic
A better test: From both systems,
  create the data of interest (budget_1: collect (0) & format (1) ),
  sort by all possible indices,
  compare.
*** DONE the desktop error is the same as the laptop error
PYTHONPATH='.' python3 Code/build/budget_1.py
Traceback (most recent call last):
  File "Code/build/budget_1.py", line 23, in <module>
    tests.row_numbers_raw( dfs )
  File "/mnt/Code/build/budget_1_tests.py", line 17, in row_numbers_raw
    assert len( dfs[file] ) == length
AssertionError
** TODO ? in subsamples, why are there so many dept folders in pivots/?
The pdfs are drawn correctly only for things in the sample,
but those pivots exist even for things not in the sample.
* TODO Facebook ads
** will be
a picture, and the option to click through to (the guide? more pictures and the guide?)
** TODO ask alejandro, explain incomplete is still good
** TODO determine cost
using list of munis which LC will send
* TODO record streaming audio
** TODO ? record the browser, not the soundcard
** TODO enlist Caoba
talk to Fancisco
  Adri sent me contact over Whatsapp
** TODO beware dropout
*** option: interleave processes
Record for 2 minutes each, starting on even and odd minutes.
Uses twice as much bandwidth.
*** option: restart as soon as dropped out
Requires: detecting dropout
          saving file gracefully after dropout
** Alejo has list of websites to record
* TODO fix
** TODO ? some groupby.apply methods might be replaceable by groupby.agg
*** Both accept lambda -- e.g. here:
import pandas as pd
x = pd.DataFrame( [[1,2],[1,3],[1,4],
                   [2,4],[2,5]],
                  columns = ["a","b"] )
( x . groupby("a") .
  agg( lambda df: df.iloc[0] ) )
*** But agg seems to require something that returns one row
e.g., continuing the previous example, this doesn't work:
( x . groupby("a") .
  agg( lambda df: df.iloc[0:2] ) )
** fix broken OneDrive archive
I added a key, so that OneDrive can't extract and re-archive it,
and now it takes forever to download.
* ~TODO test
** check my aggregated sums against DNP's own
Good opportunity for property-based testinig.
** integration data tests
Can check results at
https://terridata.dnp.gov.co/
enter a municipality (department also possible)
and then choose "finanzas publicas".
** DONE negative budget items
see explore/negative_money.py
In the raw data, yes,
but not after reducing the number of rows at stage 1p5.
** DONE integration tests for Code/build/budget_*.py
*** comparing integ_tests/ for ingresos. 2018, Santa Marta and Antioquia
 raw: good (consistent with budget_2)
 budget_2: good (consistent with budget_3)
 budget_3: good (consistent with budget_4)
 budget_4: good (consistent with budget_5)
 budget_5: good (consistent with budget_6)
 budget_6: good (consistent with budget_7)
*** scary (but fine) - regalias sum was not what I expected
 see explore/bad_regalias_sum.py
*** row numbers look good
**** iBudget_1 has row numbers consistent with wc on the raw data
 ['ingresos', 'inversion', 'funcionamiento'] ->
 993934
 1750676
 1454498
   with the exception of about 90 missing rows already accounted for
**** in iBudget_1p5 they shrink dramatically
 which is good because budget_1p5
 "restricts the data to the budget items of interest."
 >>> for s in ["ingresos","gastos"]:
 ...   print( len(s1p5_dfs[s]) )
 ...
 23692
 878518
**** in iBudget_2_subsammple they are unchanged
 23692
 878518
**** in iBudget_3 they shrink for gastos and not ingresos
 Which is good because the ingreso codes are not aggregated, while gastos are.
 23692
 102340
**** iBuget_4_scaled: unchanged
 23692
 102340
**** iBudget_5_add_regalias: about 30% more ingresos
 30496
 102340
**** iBudget_7_verbose: unchanged
 30496
 102340
*** budget item aggregation looks good
 To see why, compare these to the corresponding results from budget_3,
 which is the first data set in which the codes are aggregated into categories.

 2014 ARACATACA, raw data, edu codes
     2099284.0 - A.1
     39788.00 - 1.3.6.4.6
         0.00 - 1.3.6.4.6
         0.00 - 1.3.6.4.6
     2099284.0 + 39788.00 + 0.00 + 0.00 = 2139072.0
 2014 SANTANDER, raw data, edu codes
     6.242800e+06 - 1.3.6.1.1
     1.219844e+06 - 1.3.6.1.1
     1.920000e+04 - 1.3.6.1.1
     0.000000e+00 - 1.3.6.4.6
     2.348250e+07 - 1.3.6.4.6
     3.659532e+06 - 1.3.6.4.6
     429876457.0  -       A.1
     6.242800e+06 + 1.219844e+06 + 1.920000e+04 + 0.000000e+00 + 2.348250e+07 + 3.659532e+06 + 429876457.0 = 4.64500333e8
 2018 infrastructure codes in budget_2:
   for Antioquia:
     '1.3.11' = 0
     'A.15' = 6.581700e+10
     'A.7' = 3.091706e+10
     'A.9' = 5.013389e+11
     6.581700e+10 + 3.091706e+10 + 5.013389e+11 = 5.9807296e11
   for Santa Marta:
     1.607727e+09           A.15
     1.560000e+09            A.7
     2.992319e+10            A.9
     1.607727e+09 + 1.560000e+09 + 2.992319e+10 = 3.3090917e10

* wishes
** that I could set font only once, affecting all types of text
* PITFALLS
** modifying the code
*** only the peso columns of interest are deflated
** interpreting the data
*** missing data
See `explore/missing-spacetime.py` for demo code.
**** the problem
For tax info, there should be at least 4 items in every spacetime cell.
Instead there are exceptions -- at least 46 of them.
*** pecial muni codes
-1 = Department-level spending.
-2 = The average muni within a department,
     averaged across munis only
     (i.e. excluding the observation with muni code = -1).
*** regalias is not subsampled
So the supposedly subsampled data at or data downstream of
  build/budget_5_deflate_and_regalias.py
will have too many rows in the ingresos data.
This should not matter for drawing charts, though,
as those are always specific to a particular municipality.
*** in the raw data
 Some series might not be uniformly sampled across time.
*** PITFALL: cannot convert to int when some values are NaN
 Hence muni code is float.
** Python or its libraries
*** the boolean value of np.nan is True
*** underscores in filenames seem to confuse Matplotlib's font_manager
 https://github.com/matplotlib/matplotlib/issues/14536
*** local modules must begin with a capital letter to be imported in Jupyter
Keeping all code in a top-level folder that starts with a capital letter solves this problem.
Subfolders and files suffer no naming restriction.
*** every code folder needs a __init__.py file
as of some recent version of Python
*** change every background color: methods that didn't work
**** plt.rcParams['axes.facecolor] = 'b'
Changes the legend background, nothing else
**** ax.set_facecolor('b')
no discernible effect
**** ax.patch.set_facecolor('b')
no discernible effect
**** fig.add_subplot(2, 1, 1, facecolor = "red")
causes the second figure not to be drawn,
no other discernible effect
***** code example
    fig = Figure()

    ax = fig.add_subplot(2, 1, 1, facecolor = "red")
    drawText( ax, lines )
**** pdf.savefig() overrides background color in figures
https://stackoverflow.com/questions/56606122/matplotlib-use-the-same-custom-font-in-every-kind-of-text-axes-title-text
* DONE
** count, use muni-years, not just munis
*** why
Because not every muni has every year.
This means those counts must be separate across ingresos and gastos.
*** count them
*** use them in stage 9 (static compare)
** aggregate_all_but_biggest/better.py
*** DONE 1 - create the "top five" column
 Within each spacetime slice, sort by the money_col.
   Keep the default ascending=True, so that high values are last.
 Use .iloc to set "top five" in the last five to 1, and 0 elsewhere.
*** DONE 2 - create the "top n" column
**** the idea
 Top five is created separately in each spacetime slice.
 Top n aggregates those data in a given space slice.
**** how: given a space slice df, do this
 top_rows = df[ df["top 5"] == 1 ]
 top_items = set( top_rows["item categ"].unique() )
 df["top n"] = df["item categ"] . apply( lambda row: row in top_items )
 return df
*** DONE 3 - sums_of_all_but_top_n_in_groups()
 Like modify sum_of_all_but_last_n_rows_in_groups.
 Rather than count n, it uses the "top n" column.
*** DONE 4 - sum_all_but_greatest_n_rows_in_groups
 Might not need any change.
** pivots must include no NaN values
*** use the new library aggregate_all_but_biggest/better.py
** last-minute changes for Manuela
*** check that "item recaudo", "item total", "item oblig" are not hard-coded
 That is, that they are accessed only through metadata.two_series,
 so that I always remember to loop across all of them.
*** add deuda as a gasto: it's a new data set
 https://sisfut.dnp.gov.co/app/reportes/categoria
 "FUT_SERVICIO_DEUDA"
 Take the top category, "T".
*** use "total ingresos" in addition to "recaudo"
** how the raw data is organized
*** isomorphisms relate some columns
Determined via Code/bijectivity_test.py.
For one-to-many mappings, see output/non_bijective/*.csv
**** Codigo Concepto => Concepto, roughly
Some codes map to more than one concepto (budget item) name.
However, those are highly disaggregated.
Codes for the big categories all map to a single concepto name,
with the exception of "VAL", which is *so* broad that it's not useful.
**** simple isomorphic pairs
Código FUT, Nombre Entidad
  I suspect this is isomorphic to muni code
Cód. DANE Departamento, Nombre DANE Departamento
**** Cód. DANE Municipio <=> (Nombre DANE Municipio, Nombre DANE Departamento)
Problem: Cód. DANE Municipio <=/=> Nombre DANE Municipio
  No codigo maps to multiple nombres,
  but some "Nombre DANE Municipio"s map to multiple codigos,
Solution: The ambiguity disappears once we include department.
  The problem was simply that some cities in different departments share a name.
**** not isomorphic, but don't care (yet, at least)
Código Fuente Financiación, Fuente Financiación
Código Fuentes De Financiación, Fuentes de Financiación
*** regions
**** are almost uniquely identified by 8|9 digit codes
Some valid 8-digit codes are subsets of valid 9-digit ones.
Will therefore need to find the best regex match to the name.
**** a nearly-comprehensive list of them
comes from Directorio_CHIP_Mesa_de_Ayuda_Contraloria_2009.xls
  (which Juan found)
A subset of it became data/regions/*.csv
Municipalities are those in which the first column is 21.
  That rule collects 9 false positives,
  all of which match one of these two regular expressions:
    ^DEFENSA CIVIL COLOMBIANA$
    ^CORPORACION.*
  They have been deleted.
Departments are those in which the first column is 11.

** build data
*** write code (string) interpretation functions
**** codes to aggregate
***** Ingresos
TI.A.1
TI.A.2
TI.B
***** For all other series, just use the first two coordinates.
Note that the a subcode sometimes has 1 character, sometimes 2.
*** apply code interpretation functions to data
**** keep data separate by originating dataset
i.e. funcionamiento, inversion, ingreso
Pool for the creation of keys, but not for aggregating numbers.
**** create aggregated-code columns
Key on the "codigo budget" column.
Use first_n_subcodes() to generate 2 columns:
  "agg budget  " : string = the first 2 subcodes
  "agg budget =" : bool, indicates whether a code
                     is equal to its first two subcodes
For ingreso data, use ingreso_subcodes() to generate 2 columns:
  "agg budget"   : string = the subcode prefix of interest
  "agg budget =" : bool, indicates whether a code
                     is equal to its agg subcodes
**** aggregate rows
Group by "year", "muni code", "agg budget" and "agg budget =".
Sum the peso-valued columns.
**** reconstitute budget column, using keys in output/keys
** sum only first-generation descendents of aggregate budgets
*** replace `regex_for_at_least_n_codes` with
something of type :: int -> (Patthern,Pattern,Pattern)
where the first is the category,
the second matches only the top of the category,
and the third matches immediate children (not grandchildren, etc.) of the category.
These will be called budget-code, budgetp-code-top, and budget-code-child.
*** Replace `ingreso_regex` with similar
*** in the last part of budgets_1.py
Build those three columns.
Delete rows for which neither "top" nor "child" are true.
*** in budgets_2_agg.py
Aggregate on year, muni, dept, budget-code and budget-code-top.
*** Verify that top + child = 1 (after deleting rows).
*** delete "codigo-child"
It should be redundant to "top",
  and putting it through .agg(sum) downstream is confusing.
** compare order of magnitude of figures across years
*** problem: Figures, at least for ingresos, are 1e3 times bigger after 2016
*** method
 Within each municipality-item "mi" indexed by year "y",
 compute the ratio of mi[y] / mi[y+1], for y in [2012 .. 2017].
 (Use the "pct_change" function from pandas for this.)
 Put each in a separate column.
 Across municipality-items, find the min, max of each column.
*** TODO use assertions
 After correcting the data (multiplying peso values pre-2017 by 1000),
 it should be that,
 for each of the 3 kinds of file and each year after the first (2012),
 the median change is less than, say, 0.1.
