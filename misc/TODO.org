* TODO fix broken OneDrive archive
I added a key, so that OneDrive can't extract and re-archive it,
and now it takes forever to download.
* explore the data
** isomorphisms relate some columns
Determined via Code/bijectivity_test.py
*** simple isomorphic pairs
Código FUT, Nombre Entidad
  I suspect this is isomorphic to muni code
Cód. DANE Departamento, Nombre DANE Departamento
Código Fuente Financiación, Fuente Financiación
Código Fuentes De Financiación, Fuentes de Financiación
*** Cód. DANE Municipio <=> (Nombre DANE Municipio, Nombre DANE Departamento)
Problem: Cód. DANE Municipio <=/=> Nombre DANE Municipio
  No codigo maps to multiple nombres,
  but some "Nombre DANE Municipio"s map to multiple codigos,
Solution: The ambiguity disappears once we include department.
  The problem was simply that some cities in different departments share a name.
*** Código Concepto <=almost=> Concepto
Neither direction is bijective.
However, the one ambiguous Codigo Concepto is too aggregate to matter,
and the verbal form of a Concepto is not relevant to us.
** regions
*** are almost uniquely identified by 8|9 digit codes
Some valid 8-digit codes are subsets of valid 9-digit ones.
Will therefore need to find the best regex match to the name.
*** a nearly-comprehensive list of them
comes from Directorio_CHIP_Mesa_de_Ayuda_Contraloria_2009.xls
  (which Juan found)
A subset of it became data/regions/*.csv
Municipalities are those in which the first column is 21.
  That rule collects 9 false positives,
  all of which match one of these two regular expressions:
    ^DEFENSA CIVIL COLOMBIANA$
    ^CORPORACION.*
  They have been deleted.
Departments are those in which the first column is 11.
* TODO build data
** TODO aggregate by concepto
*** codes to aggregate
**** Ingresos
TI.A.1
TI.A.2
TI.B
**** For all other series, just use the first two coordinates.
Note that the second coordinate sometimes has 1 value, sometimes 2.
*** use the "codigo concepto" column
not (verbal) "concepto"
*** TODO distinguish shorter-than-usual prefixes
The purpose of aggregation is to sum a.b.c and a.b.d into a.b,
but there already appears an a.b value.
Exclude the latter (short) from the former (long) when aggregating the long,
and then test whether they are equal.
*** TODO make sure we can ignore VAL
It is the only "codigo concepto" that maps to more than one "concepto".

If the "subcategory summation" check works,
then ignore these (code, conepto) pairs, because they are redundant.
VAL	INGRESOS TOTALES

Ignore these because they are checks:
VAL	CIFRA CONTROL
VAL	CIFRAS DE CONTROL PARA LOS GASTOS DE FUNCIONAMIENTO
** reconstitute using keys in output/keys
* TODO test
** unit data tests
*** "subcategory summation"
Check that, e.g., T1 = T1.A.1 + T1.A.2 + T1.B
** integration data tests
Can check results at
https://terridata.dnp.gov.co/
(enter a municipality (department also possible))
and then choose "finanzas publicas".
* PITFALLS interpreting the data
Some series might not be uniformly sampled across time.
* drawing
** TODO get drawStacks() to respect outer subplots
 rework this line:
   fig, (ax) = plt.subplots()
** Emulate the graph on p.2 of the mockup pdf.
*** *???* If boxes are too small to fit a number, aggregate somehow.
*** DONE Stack the boxes, with a line and no space between.
*** legend : draw to the side, not on top of graph
*** Write the total above each stack.
*** Color the boxes per Manuela's specs.
*** DONE Put text indicating the amount on each box.
 "By default, [the x and y arguments to matplotlib.axes.Axes.text() are] in data coordinates."
 https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.axes.Axes.text.html
*** DONE No y-axis. Years on the x-axis.
*** DONE Big space between each column.
*** Change fonts
 refer to fonts/custom-font.py for
**** color: white
**** style: Montserrat black & Montserrat light
 source code: https://github.com/JulietaUla/Montserrat
 main page: https://fonts.google.com/specimen/Montserrat
*** Include text from an accompanying .txt file.
** TODO build a pdf
*** TODO use matplotlib
*** DONE reportlab is too complex and unfree
 pip3 install reportlab
**** DONE ReportLab
 https://www.reportlab.com/documentation/
**** custom fonts in reportlab
 https://www.reportlab.com/documentation/faq/#2.6.2
*** DONE pyfpdf appears to badly support Python 3
 pip install --upgrade pip # afte running this, did not have pip3
 seems to be working: "python3 -m pip install fpdf"
 recommended was      "python  -m pip install fpdf"
** wish: that I could set font only once, affecting all types of text
* gotchas
** underscores in filenames seem to confuse Matplotlib's font_manager
https://github.com/matplotlib/matplotlib/issues/14536
** local modules must begin with a capital letter to be imported in Jupyter
Keeping all code in a top-level folder that starts with a capital letter solves this problem. Subfolders and files suffer no naming restriction.
** every code folder needs a __init__.py file
as of some recent version of Python
** change every background color: methods that didn't work
*** plt.rcParams['axes.facecolor] = 'b'
Changes the legend background, nothing else
*** ax.set_facecolor('b')
no discernible effect
*** ax.patch.set_facecolor('b')
no discernible effect
*** fig.add_subplot(2, 1, 1, facecolor = "red")
causes the second figure not to be drawn,
no other discernible effect
**** code example
   fig = Figure()

   ax = fig.add_subplot(2, 1, 1, facecolor = "red")
   drawText( ax, lines )
*** pdf.savefig() overrides background color in figures
https://stackoverflow.com/questions/56606122/matplotlib-use-the-same-custom-font-in-every-kind-of-text-axes-title-text
